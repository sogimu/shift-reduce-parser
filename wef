1+2*3;

OPEN_SCOPE CE P CE MUL CE SEMICOLON

1-2*3-3
1-E
E-3
E

1-2*3*5-2

1-2*3*5
1-2*T
1-T
E-2

((1-(2*(3*5)))-2)

1) p=0, c=0, ts=
2) p=0, c=0, ts=1
3) p=0, c=-, ts=1-
4) p=0, c=-, ts=1-2
5) p=-, c=*, ts=1-2
6) p=-, c=*, ts=1-2*3
7) p=*, c=*, ts=1-2*3
8) p=*, c=*, ts=1-2*3*5
9) p=*, c=-, ts=1-2*3*5

http://e-maxx.ru/algo/expressions_parsing

allowed_no_terminals = PLUS MINUS MUL DIV OPEN CLOSE CE F 
auto start_it;
for(auto it = stack.rbegin();it!=stack.rend(); ++it)
{
  if(*it not in allowed_no_terminals)
    break;
  start_it = it;
}

s = start_it, stack.end();
auto prev_op = boost::node;
auto current_op = boost::node;

ts;

for( auto e : s)
{
  if( e is op )
  {
    current_op = e;
    if( current_op <= prev_op )
    {
      ts.push_back(prev_op);
    }
  }

  if( e is op)
  {
    prev_op = current_op;
  }
}


1+2*3;


args   operations
1
1      +
1 2    
1 2    + *
1 2 3  + *
;


aaa(a, b, c)
{
  print(a);
  print(b);
}
